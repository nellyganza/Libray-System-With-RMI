/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package auca.library.view;

import auca.library.Interface.CheckInOutInter;
import auca.library.Interface.MethodsInter;
import auca.library.Servers.Methods;
import auca.library.model.CheckinoutView;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author NISHIMWE Elyse
 */
public class AllOperation extends javax.swing.JInternalFrame {

    /**
     * Creates new form AllOperation
     */
    public AllOperation() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablereport = new javax.swing.JTable();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Reports of all  operation made");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        tablereport.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablereport);

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jRadioButton1.setText("Check In");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jRadioButton2.setText("Check out");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jRadioButton3.setText("All");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        jButton3.setText("Export PDF");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Export Excel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 651, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(jRadioButton1)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton2)
                .addGap(33, 33, 33)
                .addComponent(jRadioButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(32, 32, 32)
                .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton3))
                .addGap(9, 9, 9)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(8, 8, 8))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        try {
            Methods m = new Methods();
            Object[] colnames = {"OPERATION NUM.","CLIENT NAME","BOOK NAME","TAKEN/RETURNED DATE","OPERATION CAT.","STATUS"};
            DefaultTableModel tm = (DefaultTableModel) tablereport.getModel();
            tm.setRowCount(0);
            tm.setColumnIdentifiers(colnames);
            Registry registry = LocateRegistry.getRegistry(2003);
            CheckInOutInter ckdao = (CheckInOutInter) registry.lookup("ServerCheckInOut");
            List<CheckinoutView> operations = ckdao.getCheckInOut();
            for(CheckinoutView c:operations){
                Object obj[] ={c.getOpnumber(),m.getNameOfClient(c.getClientView().getRegno()),m.getName("title", "BookView", "bookid",c.getBookView().getBookid()),c.getDatetime(),c.getOperationcategory(),c.getStatus()};
                tm.addRow(obj);
                
            }
            tablereport.setModel(tm);
        } catch (RemoteException ex) {
            Logger.getLogger(AllOperation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(AllOperation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formInternalFrameOpened

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        try {
            // TODO add your handling code here:
            Registry registry = LocateRegistry.getRegistry(2003);
            CheckInOutInter ckdao = (CheckInOutInter) registry.lookup("ServerCheckInOut");
            Methods m = new Methods();
            Object[] colnames = {"OPERATION NUM.","CLIENT NAME","BOOK NAME","TAKEN/RETURNED DATE","OPERATION CAT.","STATUS"};
            DefaultTableModel tm = (DefaultTableModel) tablereport.getModel();
            tm.setRowCount(0);
            tm.setColumnIdentifiers(colnames);
            List<CheckinoutView> operations = ckdao.getCheckInOut();
            for(CheckinoutView c:operations){
                Object obj[] ={c.getOpnumber(),m.getNameOfClient(c.getClientView().getRegno()),m.getName("title", "BookView", "bookid",c.getBookView().getBookid()),c.getDatetime(),c.getOperationcategory(),c.getStatus()};
                if(c.getOperationcategory().equals("CHECK IN"))
                    tm.addRow(obj);
                
            }
            tablereport.setModel(tm);
        } catch (RemoteException ex) {
            Logger.getLogger(AllOperation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(AllOperation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        try {
            // TODO add your handling code here:
            Methods m = new Methods();
            Object[] colnames = {"OPERATION NUM.","CLIENT NAME","BOOK NAME","TAKEN/RETURNED DATE","OPERATION CAT.","STATUS"};
            DefaultTableModel tm = (DefaultTableModel) tablereport.getModel();
            tm.setRowCount(0);
            tm.setColumnIdentifiers(colnames);
            Registry registry = LocateRegistry.getRegistry(2003);
            CheckInOutInter ckdao = (CheckInOutInter) registry.lookup("ServerCheckInOut");
            List<CheckinoutView> operations = ckdao.getCheckInOut();
            for(CheckinoutView c:operations){
                Object obj[] ={c.getOpnumber(),m.getNameOfClient(c.getClientView().getRegno()),m.getName("title", "BookView", "bookid",c.getBookView().getBookid()),c.getDatetime(),c.getOperationcategory(),c.getStatus()};
                if(c.getOperationcategory().equals("CHECK OUT"))
                    tm.addRow(obj);
                
            }
            tablereport.setModel(tm);
        } catch (RemoteException ex) {
            Logger.getLogger(AllOperation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(AllOperation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        try {
            // TODO add your handling code here:
            Methods m = new Methods();
            Object[] colnames = {"OPERATION NUM.","CLIENT NAME","BOOK NAME","TAKEN/RETURNED DATE","OPERATION CAT.","STATUS"};
            DefaultTableModel tm = (DefaultTableModel) tablereport.getModel();
            tm.setRowCount(0);
            tm.setColumnIdentifiers(colnames);
            Registry registry = LocateRegistry.getRegistry(2003);
            CheckInOutInter ckdao = (CheckInOutInter) registry.lookup("ServerCheckInOut");
            List<CheckinoutView> operations = ckdao.getCheckInOut();
            for(CheckinoutView c:operations){
                Object obj[] ={c.getOpnumber(),m.getNameOfClient(c.getClientView().getRegno()),m.getName("title", "BookView", "bookid",c.getBookView().getBookid()),c.getDatetime(),c.getOperationcategory(),c.getStatus()};
                tm.addRow(obj);
                
            }
            tablereport.setModel(tm);
        } catch (RemoteException | NotBoundException ex) {
            Logger.getLogger(AllOperation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        exportPdfData(tablereport);
        JOptionPane.showMessageDialog(this, "The Data Exported to PDF Successfully !!!");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        export(tablereport,"operation");
        JOptionPane.showMessageDialog(this, "The Data Exported to Excel Successfully !!!");
    }//GEN-LAST:event_jButton4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablereport;
    // End of variables declaration//GEN-END:variables
    public String getFileNamePDF(String baseName){
        DateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
        String dateTimeInfo = dateformat.format(new Date());
        return baseName.concat(String.format("_%s.pdf",dateTimeInfo)); 
    }
    public void exportPdfData(JTable table){
     String path = getFileNamePDF("operation".concat("_Export"));
     try {
         DefaultTableModel mo = (DefaultTableModel) table.getModel();
         String col[] ={ mo.getColumnName(0),mo.getColumnName(1),mo.getColumnName(2),mo.getColumnName(3),mo.getColumnName(4),mo.getColumnName(5)};
        Document document=new Document();
        PdfWriter.getInstance(document,new FileOutputStream(path));
        document.open();
        document.addTitle("Informations from operations made");
        
        PdfPTable tab=new PdfPTable(col.length);
        tab.setWidthPercentage(100);
        for(int i=0;i<col.length;i++){
            tab.addCell(col[i]);
        }
         tab.completeRow();
        for(int i = 0;i<mo.getRowCount();i++){
            for(int j = 0;j< mo.getColumnCount();j++){
                tab.addCell(mo.getValueAt(i, j).toString());
            }
            tab.completeRow();
        }
        document.add(tab);
        document.close();
     } catch (DocumentException | FileNotFoundException ex) {
         Logger.getLogger(Methods.class.getName()).log(Level.SEVERE, null, ex);
     }
 }
        public String getFileNameExcel(String baseName){
        DateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
        String dateTimeInfo = dateformat.format(new Date());
        return baseName.concat(String.format("_%s.xlsx",dateTimeInfo)); 
    }

    public void export(JTable table,String tablename){
        String path = getFileNameExcel(tablename.concat("_Export"));
        try {
            Workbook book = new XSSFWorkbook();
            Sheet sheet = book.createSheet();
            writeHeaderLine(table, sheet);
            writeDataLines(table, book, sheet);
            FileOutputStream output = new FileOutputStream(path);
            book.write(output);
            book.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null ,ex.getMessage());
        }
        
    }

    public void writeHeaderLine(JTable table,Sheet sheet){
        int colnum = table.getColumnCount();
        Row headerrow = sheet.createRow(0);
        for(int i =0 ;i<colnum;i++){
            String colname = table.getColumnName(i);
            Cell cell = headerrow.createCell(i);
            cell.setCellValue(colname);
        }
        
    }

    public void writeDataLines(JTable table,Workbook book,Sheet sheet){
        int colnum = table.getColumnCount();
        int rowcount = 1;
        for(int j=0;j<table.getRowCount();j++){
            Row row = sheet.createRow(rowcount++);
            
            for(int i = 0;i<colnum;i++){
                Object valueObject = table.getValueAt(j,i);
                Cell cell = row.createCell(i);
                if(valueObject instanceof Boolean)
                    cell.setCellValue((Boolean) valueObject);
                else if(valueObject instanceof Double)
                    cell.setCellValue((Double) valueObject);
                else if(valueObject instanceof Integer)
                    cell.setCellValue((Integer) valueObject);
                else if(valueObject instanceof Float)
                    cell.setCellValue((Float) valueObject);
                else if(valueObject instanceof Date)
                    cell.setCellValue(new SimpleDateFormat("yyyy-MM-dd").format(valueObject));
                else if(valueObject instanceof BigDecimal)
                    cell.setCellValue(valueObject.toString());
                else
                    cell.setCellValue((String) valueObject);
            }
        }
        
    }
}
